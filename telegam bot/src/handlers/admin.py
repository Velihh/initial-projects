from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, chat
from aiogram.fsm.context import FSMContext
from aiogram.filters import Text, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F
import asyncio
from aiogram.filters.callback_data import CallbackData
from typing import Optional
import re
from random import choice
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from aiogram import Router

from src.bot import bot
from src.config import Config
from keyboards.admin_menu import adminMenu
from keyboards.inline_keyboards import unyversal_uny, verstka_uny, verstka_uny1, yes_no_dec, get_yes_no_dec, zna_uny
from states.admin_stats import AdminStates
from utils.filters import IsTrueContact, ChatTypeFilter
from utils.commands import set_commands
from utils.out_fin import Send_msg

router = Router()
router.message.filter(
	IsTrueContact()
)



@router.message(Command(commands=['–ù–∞–∑–∞–¥']))
async def test(message: Message, state: FSMContext):
	await state.clear()
	await message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=adminMenu.admin_panel)

@router.callback_query(unyversal_uny.filter(F.a == '–û—Ç–º–µ–Ω–∞'))
async def deduction0(query: CallbackQuery, state=FSMContext):
	await state.set_state(AdminStates.zag)
	await query.message.edit_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')

@router.message(F.reply_to_message)
async def link_to_mg(message: Message):
	msq = await Config.db.get_msq(message.reply_to_message.message_id)
	try:
		await bot.send_message(chat_id=msq[1], text=message.text, reply_to_message_id=msq[3])
		await bot.edit_message_text(chat_id=Config.chatMG_id, message_id=msq[0],
									text=f'{msq[2].split("üî¥")[0]}\n–ó–∞—è–≤–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–ª: {message.from_user.full_name}')
	except(TypeError):
		await message.answer('C–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

@router.message(Command(commands=['update_admin']))
async def update_admin(message: Message, state: FSMContext):
	t = await bot.get_chat_administrators(Config.chatMG_id)
	admins = []
	for i in t:
		if i.user.id != 6043223939:
			admins.append(i.user.id)
	Config.chatMG_id = admins
	await set_commands(bot)
	await message.answer('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω')


@router.message(Command(commands=['admin_panel']))
async def admin_panel(message: Message, state: FSMContext):
	await message.answer('–° –∫–µ–º –±—É–¥–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?', reply_markup=adminMenu.admin_panel)

@router.message(Text(text=['–ü–µ—Ä—Å–æ–Ω–∞–∂–∏']))
async def admin_panel1(message: Message, state: FSMContext):
	await message.answer(
		'–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –≤ –ø–æ–∏—Å–∫–µ, —Ç—ã–∫–Ω—É–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
		reply_markup=adminMenu.switch_keyboard_users)
	await state.set_state(AdminStates.find_user)

@router.message(AdminStates.find_user)
async def my_callback_foo(message: Message,  state: FSMContext):
	try:
		id = re.findall(r'id (\d{1,})', message.text)[0]
	except:
		await state.clear()
		await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∞—Å –≤–µ—Ä–Ω—É–ª–æ –≤ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—Å–µ —Å–±—Ä–æ—Å–∏–ª–æ', reply_markup=adminMenu.admin_panel)
		return
	data = await Config.db.print_spesh_geo(id)
	try:
		longitude = re.findall(r'\[(\d+\.\d+)', data)[0]
		latitude = re.findall(r',(\d+\.\d+)', data)[0]
		await message.answer_location(latitude=latitude, longitude=longitude)
	except(TypeError):
		await message.answer('–î–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')

	await message.answer('–ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–≥—Ä–æ–∫–∞ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?',
						 reply_markup=adminMenu.pers)
	await state.set_state(AdminStates.zag)
	await state.update_data(user_id=id)

@router.message(Text(text=['–ó–∞—Ä—è–¥—ã']))
async def charge0(message: Message, state: FSMContext):
	df = await state.get_data()
	data = await Config.db.get_name_max_on_id(df['user_id'])
	col = []
	for i in range(data[1]+1):
		col.append(i)
	col.append('–û—Ç–º–µ–Ω–∞')
	await message.answer(f'–ö–∞–∫–æ–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏–º –¥–ª—è {data[0]}?', reply_markup=zna_uny(col, v='char_up'))

@router.callback_query(unyversal_uny.filter(F.v == 'char_up'))
async def charge1(query: CallbackQuery, callback_data=unyversal_uny, state=FSMContext):
	df = await state.get_data()
	await Config.db.up_us_charge(callback_data.a, df['user_id'])
	name = await Config.db.get_name_on_id(df['user_id'])
	await query.message.edit_text(f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤ —É {name}: {callback_data.a}')

@router.message(Text(text=['Max –∑–∞—Ä—è–¥–æ–≤']))
async def maxcharge0(message: Message, state: FSMContext):
	df = await state.get_data()
	name = await Config.db.get_name_on_id(df['user_id'])
	col = []
	for i in range(51):
		col.append(i)
	col.append('–û—Ç–º–µ–Ω–∞')
	await message.answer(f'–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏–º –¥–ª—è {name}?', reply_markup=zna_uny(col, v='mchar_up'))

@router.callback_query(unyversal_uny.filter(F.v == 'mchar_up'))
async def maxcharge1(query: CallbackQuery, callback_data=unyversal_uny, state=FSMContext):
	df = await state.get_data()
	await Config.db.up_us_maxcharge(callback_data.a, df['user_id'])
	name = await Config.db.get_name_on_id(df['user_id'])
	await query.message.edit_text(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤ —É {name}: {callback_data.a}')

@router.message(Text(text=['–¢—Ä–∞–¥–∏—Ü–∏—è']))
async def tradition(message: Message, state: FSMContext):
	df = await state.get_data()
	name = await Config.db.get_name_on_id(df['user_id'])
	col = ['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò—Å–∫—É—Å—Å—Ç–≤–æ–≤–µ–¥–µ–Ω–∏–µ','–û—Ç–º–µ–Ω–∞']
	await message.answer(f'–ö–∞–∫—É—é —Ç—Ä–∞–¥–∏—Ü–∏—é —É—Å—Ç–∞–Ω–æ–≤–∏–º –¥–ª—è {name}?', reply_markup=verstka_uny(col, v='tradish'))

@router.callback_query(unyversal_uny.filter(F.v == 'tradish'))
async def tradition1(query: CallbackQuery, callback_data=unyversal_uny, state=FSMContext):
	df = await state.get_data()
	await Config.db.up_one_on_id('tradition', callback_data.a, df['user_id'])
	name = await Config.db.get_name_on_id(df['user_id'])
	await query.message.edit_text(f'–¢—Ä–∞–¥–∏—Ü–∏—è —É {name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {callback_data.a}')
	
@router.message(Text(text=['–ò–º—è']))
async def tradition(message: Message, state: FSMContext):
	df = await state.get_data()
	name = await Config.db.get_name_on_id(df['user_id'])
	col = ['–û—Ç–º–µ–Ω–∞']
	await state.set_state(AdminStates.new_name)
	msg = await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂—É {name}? –¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è', reply_markup=verstka_uny(col))
	await state.update_data(msg=msg.message_id)

@router.message(AdminStates.new_name)
async def tradition1(message: Message, state=FSMContext):
	df = await state.get_data()
	await Config.db.up_one_on_id('hero', message.text, df['user_id'])
	await bot.delete_message(chat_id=message.from_user.id, message_id=df['msg'])
	await state.set_state(AdminStates.zag)
	await message.answer(f'–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}')


@router.message(Text(text=['–†–∞–π–æ–Ω—ã']))
async def district(message: Message, state: FSMContext):
	await message.answer('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞–º–∏', reply_markup=adminMenu.district)

@router.message(Text(text=['–û–±—â–∞—è —Å–≤–æ–¥–∫–∞']))
async def district(message: Message, state: FSMContext):
	df = await Config.db.admin_get_map()
	text = '–†–∞–π–æ–Ω—ã:\n'
	flag = False
	for i in df:
		text = text + f'\n{i[0]}\n–ó–∞—Ä—è–¥–æ–≤: {i[1]}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤: {i[3]}\n' \
					  f'–¶–∏–∫–ª —Ä–∞–π–æ–Ω–∞ —Ä–∞–≤–µ–Ω: {i[4]} –º–∏–Ω—É—Ç–∞–º\n'
		if i[2] != 'miss':
			flag = True
	if flag:
		text += '\n–ê–Ω–æ–º–∞–ª–∏–∏ –µ—Å—Ç—å –≤ —Ä–∞–π–æ–Ω–∞—Ö:\n'
		for i in df:
			if i[2] != 'miss':
				text = text + f'{i[0]} - {i[2]}\n'
	else:
		text += '–ê–Ω–æ–º–∞–ª–∏–π –≤ —Ä–∞–π–æ–Ω–∞—Ö –Ω–µ—Ç'
	await Send_msg(message.from_user.id,text + '\nhttps://www.google.ru/maps/d/u/0/edit?mid=1ExV_WWScfvLDxj27PyiU5FKnX4H3RK0&usp=sharing')

@router.message(Text(text=['–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω']))
async def district(message: Message, state: FSMContext):
	await message.answer(
		'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –≤ –ø–æ–∏—Å–∫–µ, —Ç—ã–∫–Ω—É–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
		reply_markup=adminMenu.switch_keyboard_dis)
	await state.set_state(AdminStates.find_dis)

@router.message(AdminStates.find_dis)
async def my_callback_foo(message: Message, state: FSMContext):
	try:
		id = re.findall(r'id (\d{1,})', message.text)[0]
	except:
		await state.clear()
		await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∞—Å –≤–µ—Ä–Ω—É–ª–æ –≤ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—Å–µ —Å–±—Ä–æ—Å–∏–ª–æ',
							 reply_markup=adminMenu.admin_panel)
		return
	await message.answer('–ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞–π–æ–Ω–∞ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?',
						 reply_markup=adminMenu.district1)
	await state.set_state(AdminStates.zag)
	await state.update_data(dis_id=id)

@router.message(Text(text=['–ù–∞–∑–≤–∞–Ω–∏–µ']))
async def district(message: Message, state: FSMContext):
	col = ['–û—Ç–º–µ–Ω–∞']
	await state.set_state(AdminStates.new_name1)
	msg = await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞? –¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
							   reply_markup=verstka_uny(col))
	await state.update_data(msg=msg.message_id)

@router.message(AdminStates.new_name1)
async def tradition1(message: Message, state=FSMContext):
	df = await state.get_data()
	await Config.db.up_dis_on_id('dis', message.text, df['dis_id'])
	await bot.delete_message(chat_id=message.from_user.id, message_id=df['msg'])
	await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}')
	await state.set_state(AdminStates.zag)

@router.message(Text(text=['–¶–∏–∫–ª']))
async def district(message: Message, state: FSMContext):
	col = ['–û—Ç–º–µ–Ω–∞']
	await state.set_state(AdminStates.timer)
	msg = await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –≤–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è —Ä–∞–π–æ–Ω?',
							   reply_markup=verstka_uny(col))
	await state.update_data(msg=msg.message_id)

@router.message(AdminStates.timer)
async def tradition1(message: Message, apscheduler: AsyncIOScheduler, state=FSMContext):
	try:
		timer = int(message.text)
		if timer > 0:
			df = await state.get_data()
			await Config.db.up_dis_on_id('timer', timer, df['dis_id'])
			await bot.delete_message(chat_id=message.from_user.id, message_id=df['msg'])
			await state.set_state(AdminStates.zag)
			id_ = df['dis_id'] + 'dis'
			apscheduler.reschedule_job(job_id=id_, trigger="interval", minutes=timer)
			await message.answer(f'–¶–∏–∫–ª –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timer}')
		else:
			await message.answer(f'–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º')
	except:
		await message.answer(f'–û—Ç–ø—Ä–∞–≤—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±—É–∫–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"')

@router.message(Text(text=['–ê–Ω–æ–º–∞–ª–∏–∏']))
async def district(message: Message, state: FSMContext):
	col = ['–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–Ω–æ–º–∞–ª–∏–∏','–û—Ç–º–µ–Ω–∞']
	await state.set_state(AdminStates.anomaly)
	msg = await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ',
							   reply_markup=verstka_uny(col))
	await state.update_data(msg=msg.message_id)

@router.callback_query(unyversal_uny.filter(F.a == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–Ω–æ–º–∞–ª–∏–∏'))
async def tradition1(query: CallbackQuery, callback_data=unyversal_uny, state=FSMContext):
	df = await state.get_data()
	await Config.db.up_dis_on_id('notes', 'miss', df['dis_id'])
	await query.message.edit_text(f'–ê–Ω–æ–º–∞–ª–∏–∏ –≤ —Ä–∞–π–æ–Ω–µ —É–¥–∞–ª–µ–Ω—ã')
	await state.set_state(AdminStates.zag)

@router.message(AdminStates.anomaly)
async def tradition1(message: Message, state=FSMContext):
	df = await state.get_data()
	await Config.db.up_dis_on_id('notes', message.text, df['dis_id'])
	await bot.delete_message(chat_id=message.from_user.id, message_id=df['msg'])
	await message.answer(f'–¢–µ–∫—É—â–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ —Ä–∞–π–æ–Ω–µ: {message.text}')
	await state.set_state(AdminStates.zag)

@router.message(Text(text=['–ó–∞—Ä—è–¥']))
async def charge0(message: Message, state: FSMContext):
	await message.answer('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–±–∞–≤–∏—Ç—å/—É–±–∞–≤–∏—Ç—å –∫ —Å—Ç–∞—Ä–æ–º—É?',
						 reply_markup=verstka_uny(['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å']))

@router.callback_query(unyversal_uny.filter(F.a == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'))
async def charge0(query: CallbackQuery, state: FSMContext):
	df = await state.get_data()
	data = await Config.db.get_dis_max(df['dis_id'])
	col = []
	for i in range(-50, data[1]+1, 2):
		col.append(i)
	col.append('–û—Ç–º–µ–Ω–∞')
	await query.message.answer(f'–ö–∞–∫–æ–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏–º –¥–ª—è {data[0]}?', reply_markup=zna_uny(col, v='charDIS_up'))


@router.callback_query(unyversal_uny.filter(F.a == '–ò–∑–º–µ–Ω–∏—Ç—å'))
async def haos(query: CallbackQuery, state: FSMContext):
	await state.set_state(AdminStates.charge_dis)
	await query.message.edit_text('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–Ω—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä—è–¥–æ–≤ —Ä–∞–π–æ–Ω–∞(—ç—Ç–æ —á–∏—Å–ª–æ –ø—Ä–∏–±–∞–≤–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é. '
								  '–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ—è, –Ω–æ –≤ —Å—É–º–º–µ –∏—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —É—Ö–æ–¥–∏—Ç—å –º–µ–Ω—å—à–µ —á–µ–º –≤ -50')

@router.message(AdminStates.charge_dis)
async def shaman0_yes_no(message: Message, state: FSMContext):
	df = await state.get_data()
	try:
		count = await Config.db.up_disChar_on_id(message.text, df['dis_id'])
	except:
		await message.answer(f'–í–≤–µ–¥–∏ —Ç–∞–∫–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –±—ã–ª–∞ –Ω–µ –º–µ–Ω—å—à–µ -50')
		return
	await message.answer(f'–¢—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä—è–¥–æ–≤ —Ä–∞–π–æ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {count}')

@router.callback_query(unyversal_uny.filter(F.v == 'charDIS_up'))
async def charge1(query: CallbackQuery, callback_data=unyversal_uny, state=FSMContext):
	df = await state.get_data()
	await Config.db.up_dis_on_id("charge", callback_data.a, df['dis_id'])
	await query.message.edit_text(f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤: {callback_data.a}')

@router.message(Text(text=['Max_–∑–∞—Ä—è–¥–æ–≤']))
async def charge0(message: Message, state: FSMContext):
	col = []
	for i in range(-5, 51):
		col.append(i)
	col.append('–û—Ç–º–µ–Ω–∞')
	await message.answer(f'–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏–º?', reply_markup=zna_uny(col, v='charDISmax'))

@router.callback_query(unyversal_uny.filter(F.v == 'charDISmax'))
async def charge1(query: CallbackQuery, callback_data=unyversal_uny, state=FSMContext):
	df = await state.get_data()
	await Config.db.up_dis_on_id('max_charge', callback_data.a, df['dis_id'])
	await query.message.edit_text(f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤: {callback_data.a}')

@router.message(Text(text=['–ò–≥—Ä–æ–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ']))
async def showMenu(message: Message):
	data = Config.db.print_geo()
	if data:
		id_users = [f'1 - {data[0][0]}']
		geo = re.findall(r'(\d+\.\d+)', data[0][1])
		print(geo)
		map_request = f"[–ö–∞—Ä—Ç–∞](https://static-maps.yandex.ru/1.x/?lang=ru_RU&size=650,450&ll=60.61394971000122,56.835897300286256&l=map&pt={geo[0]},{geo[1]},pm2wtm1"
		for i in range(1, len(data)):
			print(data[i])
			id_users.append(f'{i+1} - {data[i][0]}')
			latitude = re.findall(r'\[(\d+\.\d+)', data[i][1])[0]
			longitude = re.findall(r',(\d+\.\d+)', data[i][1])[0]
			map_request += f"~{latitude},{longitude},pm2wtm{i+1}"
		map_request += ")"
		await message.answer(
			map_request,
			parse_mode='Markdown'
		)
		await message.answer(
			text="\n".join(id_users),
			# text="\n".join(map(str, id_users)),
			parse_mode='Markdown'
		)
	else:
		await message.answer('–ù–∏–∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')

@router.message(Command(commands=['gps']))
async def callback_reg(message: Message):
	# lat = re.findall(r'(\d+\.\d+),', message.text)[0]
	# lon = re.findall(r', (\d+\.\d+)', message.text)[0]
	await Config.db.add_geo(5696241401, 56.835146049210756, 60.59017460970266, 490877282, 56.84061731949926, 60.635415530295276)
	await message.answer('–≥–µ–æ')

@router.message(Command(commands=['otladka_chat']))
async def get_chooseUser_func(message: Message, apscheduler: AsyncIOScheduler, state: FSMContext):
	apscheduler.remove_all_jobs()
	await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã')

@router.message(Command(commands=['jobs']))
async def jobs(message: Message, apscheduler: AsyncIOScheduler):
	job = apscheduler.get_jobs()
	print(job)