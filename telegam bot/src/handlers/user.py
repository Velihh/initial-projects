from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, chat
from aiogram.fsm.context import FSMContext
from aiogram.filters import Text, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F
from aiogram.filters.callback_data import CallbackData
from typing import Optional
import re
from random import choice
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from aiogram import Router

from src.bot import bot
from src.config import Config
from keyboards import usersMenu,get_keyboard_us
from keyboards.inline_keyboards import unyversal_uny, verstka_uny, verstka_uny1, zna_uny
from states.user import UserStates
from utils.out_fin import live_priverka
from utils.out_fin import Send_msg

router = Router()


@router.message(Text(text='–ù–∞–∑–∞–¥', ignore_case=True))
async def showMenu(message: Message, state: FSMContext):
	await state.clear()
	try:
		await Config.db.get_name(message.from_user.id)
		await message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=usersMenu.menu0)
	except Exception as f:
		print(f'{message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', f)

@router.callback_query(unyversal_uny.filter(F.a == '–û—Ç–º–µ–Ω–∏—Ç—å'))
async def deduction0(query: CallbackQuery, state=FSMContext):
	await state.clear()
	await query.message.edit_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')

'''@router.message(F.content_type.in_({'location'}))
async def get_clair_us(message: Message):
	lat = message.location.latitude
	lon = message.location.longitude
	try:
		await Config.db.up_geo(message.from_user.id, lat, lon)
	except:
		await message.answer('–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
		return'''
	# —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–Ω–µ —Ä–∞–π–æ–Ω–∞


@router.message(Command(commands=['start']))
async def showMenu(message: Message, state: FSMContext):
	await state.clear()
	try:
		await Config.db.get_name(message.from_user.id)
		await message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=usersMenu.menu0)
	except Exception as f:
		print(f'{message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', f)

@router.message(Text(text=['–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'], ignore_case=True))  # —Å—Ç—Ä–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Ñ–∏–≥ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä
async def map_menu(message: Message, state: FSMContext):
	await state.clear()
	loc = message.location
	print(loc)
	await message.answer(f"–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é –º–æ–∂–Ω–æ:\n1) –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Å–±–æ—Ä –∑–∞—Ä—è–¥–æ–≤ —Å —Ä–∞–π–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å\n"
						 f"2) –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Ç—É–∞–ª\n"
						 f"3) –ü—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\n"
						 f"4) –ü–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–∏ –∑–∞—Ä—è–¥—ã –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É\n"
						 f"–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏",
						 reply_markup=usersMenu.menu1)

@router.message(Text(text=['–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'], ignore_case=True))  # —Å—Ç—Ä–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Ñ–∏–≥ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä
async def my_state(message: Message):
	df = await Config.db.get_state(message.from_user.id)
	await message.answer(f"{df[0]}, {df[1]}\n"
						 f"–ó–∞—Ä—è–¥–æ–≤: {df[2]}\n"
						 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤: {df[3]}\n"
						 f"–†–∞–π–æ–Ω: {df[4]}")

@router.message(Text(text=['–°–ø–∏—Å–∞—Ç—å –∑–∞—Ä—è–¥—ã'], ignore_case=True))
async def deduction(message: Message, state: FSMContext):
	await state.set_state(UserStates.charge)
	charge = await Config.db.get_one(message.from_user.id, 'charge')
	id_m = await message.answer(f'–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–ø–∏—Å—ã–≤–∞–µ—à—å —Å–≤–æ–∏ –∑–∞—Ä—è–¥—ã.\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {charge}',
						 reply_markup=verstka_uny(['–û—Ç–º–µ–Ω–∏—Ç—å']))
	await state.update_data(id_m=id_m.message_id)

@router.message(UserStates.charge)
async def deduction1(message: Message, state: FSMContext):
	df = await state.get_data()
	count = await Config.db.change_charge(message.from_user.id, abs(int(message.text)))
	try:

		await bot.edit_message_text(chat_id=message.from_user.id, message_id=df['id_m'],
									text=f'<b>–£–°–ü–ï–•.</b> –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä—è–¥–æ–≤.\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {count}')
		await state.clear()
	except:
		await message.answer(f'–í–≤–µ–¥–∏ —Ç–∞–∫–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –±—ã–ª–∞ –Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è')
		return

@router.message(Text(text=['–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞—Ä—è–¥–æ–≤']))
async def transfer0(message: Message, callback_data=unyversal_uny, state=FSMContext):
	if await live_priverka(message.from_user.id):
		df = await Config.db.transfer_of_charges(message.from_user.id)
		val = []
		col = []

		for i in df:
			val.append(int(i[0]))
			col.append(i[1])
		col.append('–û—Ç–º–µ–Ω–∏—Ç—å')
		val.append(0)
		print(val, df)
		await message.answer('–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—à—å –∑–∞—Ä—è–¥—ã? –ó–∞ –ø–µ—Ä–µ–¥–∞—á—É –∑–∞—Ä—è–¥–æ–≤ –º–∞–≥—É —Å–≤–æ–µ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏ —Ç—Ä–∞—Ç–∏—Ç—Å—è 1 –∑–∞—Ä—è–¥, '
							 '–∞ –∑–∞ –ø–µ—Ä–µ–¥–∞—á—É –∑–∞—Ä—è–¥–æ–≤ –º–∞–≥—É –¥—Ä—É–≥–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏ —Ç—Ä–∞—Ç–∏—Ç—Å—è 2 –∑–∞—Ä—è–¥–∞.'
							 ' –ù–∏–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –º–∞–≥–∏ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π, '
							 '—É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏.', reply_markup=verstka_uny1(col=col, t=val, b='trans'))

@router.callback_query(unyversal_uny.filter(F.b == 'trans'))
async def transfer1(query: CallbackQuery, callback_data=unyversal_uny, state=FSMContext):
	await state.update_data(id_=callback_data.t)
	t = await Config.db.get_tarif(query.from_user.id, callback_data.t)
	col = []
	if t > 0:
		for i in range(1,t+1):
			col.append(i)
		col.append('–û—Ç–º–µ–Ω–∏—Ç—å')
		await query.message.edit_text('–°–∫–æ–ª—å–∫–æ –∑–∞—Ä—è–¥–æ–≤ –ø–µ—Ä–µ–¥–∞—à—å?', reply_markup=zna_uny(col, v='transfer'))
	else:
		await query.message.edit_text('–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞—Ä—è–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏')

@router.callback_query(unyversal_uny.filter(F.v == 'transfer'))
async def transfer3(query: CallbackQuery, callback_data=unyversal_uny, state=FSMContext):
	data = await state.get_data()
	charge = await Config.db.transfer_of_charges1(query.from_user.id, data['id_'], callback_data.a)
	await query.message.edit_text(f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ {callback_data.a} –µ–¥–∏–Ω–∏—Ü—ã –∑–∞—Ä—è–¥–∞. –û—Å—Ç–∞—Ç–æ–∫ –∑–∞—Ä—è–¥–æ–≤: {charge}')
	tgid = await Config.db.get_tgid(data['id_'])
	await bot.send_message(chat_id=tgid, text=f'–í–∞–º –ø–µ—Ä–µ–¥–∞–Ω–æ {callback_data.a} –µ–¥–∏–Ω–∏—Ü—ã –∑–∞—Ä—è–¥–∞')

@router.message(Text(text=['–ö–∞—Ä—Ç–∞']))
async def map(message: Message, state: FSMContext):
	df = await Config.db.get_map()
	text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤ –≤ —Ä–∞–π–æ–Ω–∞—Ö:\n'
	flag = False
	for i in df:
		text = text + f'{i[0]}: {i[1]}\n'
		if i[2] != 'miss':
			flag = True
	if flag:
		text += '\n–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏:\n'
		for i in df:
			if i[2] != 'miss':
				text = text + f'{i[0]} - {i[2]}\n'
	await Send_msg(message,text + '\nhttps://www.google.ru/maps/d/u/0/edit?mid=1ExV_WWScfvLDxj27PyiU5FKnX4H3RK0&usp=sharing')

### –ó–ê–Ø–í–ö–ò

@router.message(Text(text=['–í–æ–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä–∞–º']))
async def link_to_mg1(message: Message, state=FSMContext):
	await state.clear()
	await state.set_state(UserStates.question)
	await message.answer('–°–ª–µ–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å')

@router.message(UserStates.question)
async def link_to_mg1(message: Message, state=FSMContext):
	col = ['–î–∞', "–ù–µ—Ç"]
	await state.set_state(UserStates.zag)
	await state.update_data(text=message.text)
	await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä–∞–º: {message.text}\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
						 reply_markup=verstka_uny(col=col, v='–ú–ì_–∑–∞—è–≤–∫–∞'))

@router.callback_query(unyversal_uny.filter(F.v == '–ú–ì_–∑–∞—è–≤–∫–∞'))
async def link_to_mg1(query: CallbackQuery, callback_data=unyversal_uny, state=FSMContext):
	if callback_data.a == '–î–∞':
		tgid = query.from_user.id
		df = await state.get_data()
		name = await Config.db.get_name(tgid)
		await bot.send_message(Config.chatMG_id,
							   f'[{name}](tg://user?id={tgid})',
							   parse_mode='Markdown')
		await query.message.delete()
		msg0 = await query.message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å: <i>{df["text"]}</i> - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä–∞–º, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç')

		msg = await Send_msg(Config.chatMG_id,
							   f"{name} –∑–∞–¥–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä–∞–º:\n"
							   f"<i>{df.get('text')}</i>\n"
							   f"üî¥<b>–ù–ï–ó–ê–ö–†–´–¢–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n"
							   f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
		await Config.db.save_msg(msg.message_id, tgid, msg.text, msg0.message_id)
	else:
		await query.message.edit_text('–¢–æ–≥–¥–∞ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑')
	await state.clear()